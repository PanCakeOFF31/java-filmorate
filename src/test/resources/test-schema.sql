DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS genre CASCADE;
DROP TABLE IF EXISTS director CASCADE;
DROP TABLE IF EXISTS film CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;
DROP TABLE IF EXISTS film_director CASCADE;
DROP TABLE IF EXISTS person CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS film_like CASCADE;
DROP TABLE IF EXISTS film_review CASCADE;
DROP TABLE IF EXISTS review_like CASCADE;
DROP TABLE IF EXISTS event CASCADE;
-- film_rate понадобится для заключительного задания
DROP TABLE IF EXISTS film_rate CASCADE;
-- Типы данных удаляются в последнюю очередь
DROP TYPE IF EXISTS event_type_enum;
DROP TYPE IF EXISTS operation_enum;

CREATE TABLE mpa (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(10) NOT NULL UNIQUE CHECK(TRIM(name) <> '')
);

CREATE TABLE genre (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(32) NOT NULL UNIQUE CHECK(TRIM(name) <> '')
);

CREATE TABLE director (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(128) NOT NULL CHECK(TRIM(name) <> '')
);

CREATE TYPE event_type_enum AS ENUM ('LIKE', 'REVIEW', 'FRIEND');
CREATE TYPE operation_enum AS ENUM ('ADD', 'REMOVE', 'UPDATE');

CREATE TABLE film (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(128) NOT NULL CHECK(TRIM(name) <> ''),
    description varchar(200) NOT NULL,
    release_date date NOT NULL CHECK (release_date > '1895-12-28'),
    duration int NOT NULL CHECK (duration > 0),
    mpa int REFERENCES mpa(id)
);

CREATE TABLE film_genre (
    film_id int REFERENCES film(id) ON DELETE CASCADE,
    genre_id int REFERENCES genre(id) ON DELETE CASCADE,
    UNIQUE (film_id, genre_id)
);

CREATE TABLE film_director (
    film_id int REFERENCES film(id) ON DELETE CASCADE,
    director_id int REFERENCES director(id) ON DELETE CASCADE,
    UNIQUE (film_id, director_id)
);

CREATE TABLE person (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(128) NOT NULL CHECK(email ~ ('^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$')) UNIQUE,
    login varchar(64) NOT NULL CHECK(TRIM(name) <> '') UNIQUE,
    name varchar(64) NULL,
    birthday date CHECK (birthday < NOW())
);

CREATE TABLE friendship (
    user_id int REFERENCES person(id) ON DELETE CASCADE,
    friend_id int REFERENCES person(id) ON DELETE CASCADE,
    is_confirmed boolean DEFAULT false,
    UNIQUE(user_id, friend_id),
    CHECK (user_id <> friend_id)
);

CREATE TABLE film_like (
        film_id int REFERENCES film(id) ON DELETE CASCADE,
        user_id int REFERENCES person(id) ON DELETE CASCADE,
        UNIQUE(film_id, user_id)
);

CREATE TABLE film_review (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id int REFERENCES person(id) ON DELETE CASCADE,
    film_id int REFERENCES film(id) ON DELETE CASCADE,
    content varchar(1000) NOT NULL CHECK(TRIM(content) <> ''),
    is_positive boolean NOT NULL,
    UNIQUE (user_id, film_id)
);

CREATE TABLE review_like (
    review_id int REFERENCES film_review(id) ON DELETE CASCADE,
    user_id int REFERENCES person(id) ON DELETE CASCADE,
    is_like boolean NOT NULL,
    UNIQUE (review_id, user_id)
);

CREATE TABLE film_rate (
    film_id int REFERENCES film(id) ON DELETE CASCADE,
    user_id int REFERENCES person(id) ON DELETE CASCADE,
    user_rate int CHECK (user_rate BETWEEN 1 AND 10),
    UNIQUE (film_id, user_id)
);

CREATE TABLE event (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    time_stamp bigint NOT NULL,
    user_id int REFERENCES person(id),
    event_type event_type_enum,
    operation operation_enum,
    entity_id int NOT NULL CHECK(entity_id > 0)
);